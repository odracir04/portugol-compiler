%{
#include <stdlib.h>
#include <stdio.h>

int yylex();
int yyparse();
int yyerror();
%}

%start start
%token ALGORITMO
%token FIMALGORITMO
%token INICIO
%token STRING_LIT
%token VAR
%token TYPE
%token IF
%token ELSE
%token ENDIF
%token SWITCH
%token CASE
%token DEFAULT
%token ENDSWITCH
%token COLON
%token NEWLINE
%token COMMA
%token VAR_NAME
%token ARROW
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token OPEN_CURLY
%token CLOSE_CURLY
%token MODULO
%token POWER
%token BOOL_LIT
%token DOUBLE_LIT
%token INT_LIT
%token EQUALS
%token GREATER_EQUALS
%token LESS_EQUALS
%token LESS_THAN
%token GREATER_THAN
%token DIFFERENT

%left POWER
%left MODULO
%left TIMES
%left DIVIDE
%left PLUS
%left MINUS
%%

start: HEADER VARIABLES ALGORITHM | HEADER ALGORITHM;
HEADER: TITLE;
TITLE: ALGORITMO VAR_NAME NEWLINE | TITLE NEWLINE;
VARIABLES: VAR VAR_DECLARATION_LIST;
VAR_DECLARATION_LIST: VAR_DECLARATION | VAR_DECLARATION_LIST VAR_DECLARATION;
VAR_DECLARATION: VAR_NAME COLON TYPE NEWLINE
                | VAR_NAME EXTRA_VARS COLON TYPE NEWLINE | VAR_DECLARATION NEWLINE;
EXTRA_VARS: COMMA VAR_NAME | EXTRA_VARS COMMA VAR_NAME;
ALGORITHM: ALGORITHM_START STATEMENT_LIST ALGORITHM_END;
ALGORITHM_START: INICIO NEWLINE | ALGORITHM_START NEWLINE;
ALGORITHM_END: FIMALGORITMO | ALGORITHM_END NEWLINE;
STATEMENT_LIST: STATEMENT | STATEMENT STATEMENT_LIST;
STATEMENT: ASSIGNMENT NEWLINE | STATEMENT NEWLINE | IFELSE NEWLINE | SWITCH_STATEMENT NEWLINE;
ASSIGNMENT: VAR_NAME ARROW MATH_EXPRESSION;
MATH_EXPRESSION: MATH_EXPRESSION PLUS MATH_EXPRESSION
                | MATH_EXPRESSION MINUS MATH_EXPRESSION
                | MATH_EXPRESSION TIMES MATH_EXPRESSION
                | MATH_EXPRESSION DIVIDE MATH_EXPRESSION
                | MATH_EXPRESSION MODULO MATH_EXPRESSION
                | MATH_EXPRESSION POWER MATH_EXPRESSION
                | OPEN_CURLY MATH_EXPRESSION CLOSE_CURLY
                | LITERAL
                | VAR_NAME;
LITERAL: INT_LIT | DOUBLE_LIT | STRING_LIT | BOOL_LIT;
IFELSE: IFBEGIN STATEMENT_LIST IFEND | IFBEGIN STATEMENT_LIST ELSEBEGIN STATEMENT_LIST IFEND;
IFBEGIN: IF COMPARISON NEWLINE | IFBEGIN NEWLINE;
ELSEBEGIN: ELSE NEWLINE | ELSEBEGIN NEWLINE;
IFEND: ENDIF;
COMPARISON: MATH_EXPRESSION COMPARISON_OPERATOR MATH_EXPRESSION;
COMPARISON_OPERATOR: EQUALS | GREATER_THAN | LESS_THAN | GREATER_EQUALS | LESS_EQUALS | DIFFERENT;
SWITCH_STATEMENT: SWITCH_BEGIN CASE_LIST SWITCH_END | SWITCH_BEGIN CASE_LIST DEFAULT_CASE SWITCH_END;
SWITCH_BEGIN: SWITCH VAR_NAME NEWLINE | SWITCH_BEGIN NEWLINE;
CASE_LIST: SWITCH_CASE | SWITCH_CASE CASE_LIST;
SWITCH_CASE: CASE_BEGIN STATEMENT_LIST;
CASE_BEGIN: CASE LITERAL NEWLINE
            | CASE LITERAL EXTRA_CASES NEWLINE
            | CASE_BEGIN NEWLINE;
EXTRA_CASES: COMMA LITERAL | EXTRA_CASES COMMA LITERAL;
DEFAULT_CASE: DEFAULT NEWLINE STATEMENT_LIST;
SWITCH_END: ENDSWITCH;


%%


int yyerror() {
    return 1;
}

%{
#include <stdlib.h>
#include <stdio.h>
#include "src/compiler.h"

int yylex();
int yyparse();
int yyerror();
%}

%start start

%token ALGORITMO
%token FIMALGORITMO
%token INICIO

%token VAR
%token TYPE

%token IF
%token THEN
%token ELSE
%token ENDIF

%token SWITCH
%token CASE
%token DEFAULT
%token ENDSWITCH

%token WRITE
%token WRITE_LINE
%token READ

%token AND
%token NOT
%token OR
%token XOR

%token COLON
%token NEWLINE
%token COMMA
%token VAR_NAME
%token ARROW

%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token OPEN_CURLY
%token CLOSE_CURLY
%token MODULO
%token POWER

%token BOOL_LIT
%token DOUBLE_LIT
%token INT_LIT
%token STRING_LIT

%token EQUALS
%token GREATER_EQUALS
%token LESS_EQUALS
%token LESS_THAN
%token GREATER_THAN
%token DIFFERENT

%token FOR
%token FROM
%token TO
%token DO
%token STEP
%token ENDFOR

%token WHILE
%token ENDWHILE
%token DOWHILE

%token BREAK

%token PROCEDURE
%token ENDPROCEDURE

%token FUNCTION
%token ENDFUNCTION

%token RETURN

%right POWER
%left MODULO TIMES DIVIDE
%left PLUS MINUS

%left AND XOR OR NOT

%%
start: PROGRAM_HEADER PROGRAM_BODY;

PROGRAM_HEADER: PROGRAM_NAME NEWLINE 
                | PROGRAM_HEADER NEWLINE;
PROGRAM_BODY:   FUNCTIONS_AND_VARIABLES ALGORITHM;

PROGRAM_NAME: ALGORITMO VAR_NAME;

FUNCTIONS_AND_VARIABLES: VARIABLES
                        | FUNCTION_LIST
                        | VARIABLES FUNCTION_LIST;

VARIABLES: VAR VAR_DECLARATION_LIST;   
VAR_DECLARATION_LIST: VAR_DECLARATION | VAR_DECLARATION_LIST VAR_DECLARATION;
VAR_DECLARATION: DECLARATION NEWLINE | VAR_DECLARATION NEWLINE;
DECLARATION: VAR_NAME TYPE_CHECK | MULTI_DECLARATION TYPE_CHECK;
MULTI_DECLARATION: VAR_NAME EXTRA_VARS;
TYPE_CHECK: COLON TYPE;
EXTRA_VARS: EXTRA_VAR | EXTRA_VARS EXTRA_VAR;
EXTRA_VAR: COMMA VAR_NAME;

FUNCTION_LIST: FUNCTION_STATEMENT | PROCEDURE_STATEMENT | FUNCTION_LIST FUNCTION_STATEMENT
                | FUNCTION_LIST PROCEDURE_STATEMENT | FUNCTION_LIST NEWLINE;


ALGORITHM: ALGORITHM_HEADER ALGORITHM_BODY;

ALGORITHM_HEADER: INICIO NEWLINE | ALGORITHM_HEADER NEWLINE;
ALGORITHM_BODY: STATEMENT_LIST ALGORITHM_END;
ALGORITHM_END: FIMALGORITMO | ALGORITHM_END NEWLINE;


STATEMENT_LIST: STATEMENT | STATEMENT STATEMENT_LIST;
STATEMENT: ASSIGNMENT NEWLINE | STATEMENT NEWLINE | IFELSE NEWLINE | SWITCH_STATEMENT NEWLINE
            | WRITE_STATEMENT NEWLINE | READ_STATEMENT NEWLINE | FOR_STATEMENT NEWLINE | WHILE_STATEMENT NEWLINE
            | DOWHILE_STATEMENT NEWLINE | BREAK NEWLINE | FUNCTION_CALL NEWLINE
            | RETURN_STATEMENT NEWLINE;

ASSIGNMENT: VAR_NAME ASSIGN;
ASSIGN: ARROW MATH_EXPRESSION;

IFELSE: IFBODY IFEND;
IFBODY: IFBEGIN STATEMENT_LIST | IFBODY ELSEBODY;
ELSEBODY: ELSEBEGIN STATEMENT_LIST;
IFBEGIN: IF_COMPARISON THEN_END | IFBEGIN NEWLINE;
IF_COMPARISON: IF COMPARISON;
THEN_END: THEN NEWLINE;
ELSEBEGIN: ELSE NEWLINE | ELSEBEGIN NEWLINE;
IFEND: ENDIF;

MATH_EXPRESSION: MATH_EXPRESSION PLUS MATH_EXPRESSION
                | MATH_EXPRESSION MINUS MATH_EXPRESSION
                | MATH_EXPRESSION TIMES MATH_EXPRESSION
                | MATH_EXPRESSION DIVIDE MATH_EXPRESSION
                | MATH_EXPRESSION MODULO MATH_EXPRESSION
                | MATH_EXPRESSION POWER MATH_EXPRESSION
                | OPEN_CURLY MATH_EXPRESSION CLOSE_CURLY
                | LITERAL
                | VAR_NAME
                | FUNCTION_CALL;
LITERAL: INT_LIT | DOUBLE_LIT | STRING_LIT | BOOL_LIT;

COMPARISON: MATH_EXPRESSION COMPARISON_RIGHT
            | NOT COMPARISON
            | COMPARISON DISJUNCTION
            | COMPARISON CONJUNCTION
            | COMPARISON XORTION
            | MATH_EXPRESSION;
COMPARISON_RIGHT: COMPARISON_OPERATOR MATH_EXPRESSION;
DISJUNCTION: OR COMPARISON;
CONJUNCTION: AND COMPARISON;
XORTION: XOR COMPARISON;
COMPARISON_OPERATOR: EQUALS | GREATER_THAN | LESS_THAN | GREATER_EQUALS | LESS_EQUALS | DIFFERENT;

SWITCH_STATEMENT: SWITCH_HEADER SWITCH_BODY;
SWITCH_HEADER: SWITCH_DECLARE NEWLINE | SWITCH_HEADER NEWLINE;
SWITCH_DECLARE: SWITCH VAR_NAME;
SWITCH_BODY: CASE_BODY SWITCH_END;
CASE_BODY: CASE_LIST | CASE_LIST DEFAULT_CASE;
CASE_LIST: SWITCH_CASE | SWITCH_CASE CASE_LIST;
SWITCH_CASE: CASE_BEGIN STATEMENT_LIST;
CASE_BEGIN: CASE_DECLARE NEWLINE | CASE_DECLARE EXTRA_CASES | CASE_BEGIN NEWLINE;
CASE_DECLARE: CASE LITERAL;
EXTRA_CASES: EXTRA_CASE_LIST NEWLINE;
EXTRA_CASE_LIST: EXTRA_CASE_DECLARE | EXTRA_CASE_LIST EXTRA_CASE_DECLARE;
EXTRA_CASE_DECLARE: COMMA LITERAL;
DEFAULT_CASE: DEFAULT_HEAD STATEMENT_LIST;
DEFAULT_HEAD: DEFAULT NEWLINE;
SWITCH_END: ENDSWITCH;

WRITE_STATEMENT: WRITE_BEGIN WRITE_END;
WRITE_BEGIN: WRITE OPEN_CURLY | WRITE_LINE OPEN_CURLY;
WRITE_END: WRITE_PARAMS CLOSE_CURLY;
WRITE_PARAMS: VAR_NAME | STRING_LIT | VAR_NAME EXTRA_PARAMS | STRING_LIT EXTRA_PARAMS;
EXTRA_PARAMS: EXTRA_PARAM | EXTRA_PARAMS EXTRA_PARAM;
EXTRA_PARAM: COMMA STRING_LIT | COMMA VAR_NAME;

READ_STATEMENT: READ_BEGIN READ_END;
READ_BEGIN: READ OPEN_CURLY;
READ_END: READ_PARAMS CLOSE_CURLY;
READ_PARAMS: VAR_NAME | VAR_NAME EXTRA_VARS;

FOR_STATEMENT: FOR_HEADER FOR_BODY;
FOR_HEADER: FOR_DECLARE_VAR FOR_DECLARE_BODY;
FOR_DECLARE_VAR: FOR VAR_NAME;
FOR_DECLARE_BODY: RANGE_DECLARE DO_DECLARE;
RANGE_DECLARE: START_RANGE END_RANGE | RANGE_DECLARE STEP_DECLARE;
START_RANGE: FROM MATH_EXPRESSION;
END_RANGE: TO MATH_EXPRESSION;
STEP_DECLARE: STEP MATH_EXPRESSION;
DO_DECLARE: DO NEWLINE;
FOR_BODY: STATEMENT_LIST FOR_END;
FOR_END: ENDFOR;

WHILE_STATEMENT: WHILE_HEADER WHILE_BODY;
WHILE_HEADER: WHILE_DECLARE DO_DECLARE;
WHILE_DECLARE: WHILE COMPARISON;
WHILE_BODY: STATEMENT_LIST WHILE_END;
WHILE_END: ENDWHILE;

DOWHILE_STATEMENT: DOWHILE_HEADER DOWHILE_BODY;
DOWHILE_HEADER: DOWHILE NEWLINE;
DOWHILE_BODY: STATEMENT_LIST DOWHILE_END;
DOWHILE_END: TO COMPARISON;

RETURN_STATEMENT: RETURN COMPARISON;

PROCEDURE_STATEMENT: PROCEDURE_HEADER PROCEDURE_BODY;
PROCEDURE_HEADER: PROCEDURE_NAME PROCEDURE_DECLARE | PROCEDURE_HEADER NEWLINE;
PROCEDURE_NAME: PROCEDURE VAR_NAME;
PROCEDURE_DECLARE: PROCEDURE_PARAMS NEWLINE;
PROCEDURE_PARAMS: PROCEDURE_PARAMS_BEGIN PROCEDURE_PARAMS_END;
PROCEDURE_PARAMS_BEGIN: OPEN_CURLY | OPEN_CURLY VAR;
PROCEDURE_PARAMS_END: PROCEDURE_PARAMS_LIST CLOSE_CURLY;
PROCEDURE_PARAMS_LIST: PROCEDURE_PARAM | PROCEDURE_PARAMS_LIST NEW_PARAM;
NEW_PARAM: COMMA PROCEDURE_PARAM;
PROCEDURE_PARAM: VAR_NAME TYPE_CHECK | MULTI_DECLARATION TYPE_CHECK;
PROCEDURE_BODY: VARIABLES PROCEDURE_ALGORITHM;
PROCEDURE_ALGORITHM: PROCEDURE_ALGORITHM_HEADER PROCEDURE_ALGORITHM_BODY;
PROCEDURE_ALGORITHM_HEADER: FUNCTION_ALGORITHM_START;
PROCEDURE_ALGORITHM_BODY: STATEMENT_LIST ENDPROCEDURE;

FUNCTION_STATEMENT: FUNCTION_HEADER FUNCTION_BODY;
FUNCTION_HEADER: FUNCTION_NAME FUNCTION_DECLARE | FUNCTION_HEADER NEWLINE;
FUNCTION_NAME: FUNCTION VAR_NAME;
FUNCTION_DECLARE: FUNCTION_PARAMS NEWLINE;
FUNCTION_PARAMS: TYPE_CHECK | PROCEDURE_PARAMS TYPE_CHECK;
FUNCTION_BODY: VARIABLES FUNCTION_ALGORITHM;
FUNCTION_ALGORITHM: FUNCTION_ALGORITHM_HEADER FUNCTION_ALGORITHM_BODY;
FUNCTION_ALGORITHM_HEADER: FUNCTION_ALGORITHM_START;
FUNCTION_ALGORITHM_BODY: STATEMENT_LIST ENDFUNCTION;
FUNCTION_ALGORITHM_START: INICIO NEWLINE | FUNCTION_ALGORITHM_START NEWLINE;

FUNCTION_CALL: FUNCTION_CALL_BEGIN FUNCTION_CALL_END;
FUNCTION_CALL_BEGIN: VAR_NAME OPEN_CURLY;
FUNCTION_CALL_END: MULTI_PARAMS CLOSE_CURLY | MATH_EXPRESSION CLOSE_CURLY;
MULTI_PARAMS: MATH_EXPRESSION EXTRA_CALL_PARAMS;
EXTRA_CALL_PARAMS: EXTRA_CALL_PARAM | EXTRA_CALL_PARAMS EXTRA_CALL_PARAM;
EXTRA_CALL_PARAM: COMMA MATH_EXPRESSION;
%%


int yyerror() {
    return 1;
}
